<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>api_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DLLIMPORT</name>
      <anchorfile>api_8h.html</anchorfile>
      <anchor>a42e8562907b0cfb953e45695c502abc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DLLEXPORT</name>
      <anchorfile>api_8h.html</anchorfile>
      <anchor>a9a6003c234169a5485aec955fa3f1a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DLLLOCAL</name>
      <anchorfile>api_8h.html</anchorfile>
      <anchor>ac0364319f873956eae1cd72684cd09c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DLLAPI</name>
      <anchorfile>api_8h.html</anchorfile>
      <anchor>af10e3d2e2fa8d63100afff1254fbbc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOCAL</name>
      <anchorfile>api_8h.html</anchorfile>
      <anchor>ac2b19aaea6a6e9a39e568f32bb3640f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blockArrowLLT.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/decomposition/</path>
    <filename>blockArrowLLT_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::decomposition</namespace>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>blockArrowLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a2f65392b0bcd4dabf6cf997d6d8898a3</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up=false)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a944556805b9fcec753b8a7622c5e796e</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ada4d609948373c6e0a7ecad04787dafb</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triBlockDiagLLT.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/decomposition/</path>
    <filename>triBlockDiagLLT_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::decomposition</namespace>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>triBlockDiagLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab12e8c947e5c397e5e5384ed017369b5</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a9a9937ec7cc2b641254c81d004cf7ee8</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int start=0)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab817f90e5d71975926a9a2e8c2c43ffd</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int end=-1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>defs_8h.html</filename>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::constant</namespace>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
      <name>MatrixConstRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a36932925bb0032413d85027bcfb42dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8220344a91c3dcd12dc60b751427cdc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>VectorConstRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a61011419a1f4de75f658df1d17ceaae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a91278fdbb65099f6051406727c2e28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiRotation&lt; double &gt;</type>
      <name>Givens</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a7f003bb597f0e6405c23ec9f3c718670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::MatrixXd</type>
      <name>EmptyMatrix</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8d28e800dd5e8096dea07de068ea84d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::VectorXd</type>
      <name>EmptyVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a5b58525ffcacb25ca5eca45e9ec4d5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::uint32_t</type>
      <name>noIterationFlag</name>
      <anchorfile>namespacejrl_1_1qp_1_1constant.html</anchorfile>
      <anchor>a3cb37c8a08b9ed1b966bd02f96dbafa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DualSolver.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>DualSolver_8h.html</filename>
    <includes id="SolverOptions_8h" name="SolverOptions.h" local="no" imported="no">jrl-qp/SolverOptions.h</includes>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="ActiveSet_8h" name="ActiveSet.h" local="no" imported="no">jrl-qp/internal/ActiveSet.h</includes>
    <includes id="SelectedConstraint_8h" name="SelectedConstraint.h" local="no" imported="no">jrl-qp/internal/SelectedConstraint.h</includes>
    <includes id="TerminationType_8h" name="TerminationType.h" local="no" imported="no">jrl-qp/internal/TerminationType.h</includes>
    <includes id="Workspace_8h" name="Workspace.h" local="no" imported="no">jrl-qp/internal/Workspace.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">jrl-qp/utils/Logger.h</includes>
    <includes id="debug_8h" name="debug.h" local="no" imported="no">jrl-qp/utils/debug.h</includes>
    <class kind="class">jrl::qp::DualSolver</class>
    <class kind="struct">jrl::qp::DualSolver::StepLength</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>enums.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>enums_8h.html</filename>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ActivationStatus</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8200417432fa485fd7e8cc8ef1d1ff49</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a6b273343c454f9c53dcfc9c4ccf171d2">INACTIVE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49aa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a9e43f5291e6fcb2ad99c8e3f91acd179">UPPER</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a75fe593b97fa52826f3dd3eb2b92ff57">LOWER_BOUND</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49ad21999f32561a206952276ffc08b975a">UPPER_BOUND</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49ac6e6dc18b53b4c2681394b9d8aefcec7">FIXED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminationStatus</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a2be96344dd3712e23a7eabc0d530062c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cad0749aaba8b833466dfcbb0428e4f89c">SUCCESS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cac978501e064fa33613b35d570d5401ee">INCONSISTENT_INPUT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cae88b32132c55177d5b27f4cf74e0de9d">NON_POS_HESSIAN</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca6faaca695f728b47f47dd389f31e4a93">INFEASIBLE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca166fdb12611b864605b50bcb6ef3c185">MAX_ITER_REACHED</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca5faf851f584c5d83788f2de723637cdc">LINEAR_DEPENDENCY_DETECTED</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca0d4ade66ad6c3f9caf79f8d75b63d75b">OVERCONSTRAINED_PROBLEM</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogFlags</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>ad24df199de1a6f61275d4c96107b5dc3</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aa84cc046d48610b05c21fd3670d0c829">INPUT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a81bc75c5e7d582c92dbec339e8d89f57">TERMINATION</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aac46279efe855c20a7388a9f1a12a465">ITERATION_BASIC_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3afac1d6b38b3d6531966bceaec0983095">ITERATION_ADVANCE_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a6a3ca91cf2d0158ff4a3a3bf791c9f38">ACTIVE_SET</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a84033091af4b588002199e5ed322ba6c">ACTIVE_SET_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3afaee4ca3c30ee18148ce3ada37466498">INIT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aca5c504c6136e20051be115160b0f0b8">MISC</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a00749b615db836bc0f8fd5f087b2595a">NO_ITER</enumvalue>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a0b320d90746e7f8f70af2401da58984a</anchor>
      <arglist>(LogFlags a, LogFlags b)</arglist>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a1f57527a338b6e6ea3a7523f009cccc9</anchor>
      <arglist>(std::uint32_t a, LogFlags b)</arglist>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a399b02389bd6d5e70dd6d9f1b8e8c53d</anchor>
      <arglist>(LogFlags a, std::uint32_t b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockGISolver.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/experimental/</path>
    <filename>BlockGISolver_8h.html</filename>
    <includes id="DualSolver_8h" name="DualSolver.h" local="no" imported="no">jrl-qp/DualSolver.h</includes>
    <includes id="StructuredC_8h" name="StructuredC.h" local="no" imported="no">jrl-qp/structured/StructuredC.h</includes>
    <includes id="StructuredG_8h" name="StructuredG.h" local="no" imported="no">jrl-qp/structured/StructuredG.h</includes>
    <includes id="StructuredJ_8h" name="StructuredJ.h" local="no" imported="no">jrl-qp/structured/StructuredJ.h</includes>
    <includes id="StructuredQR_8h" name="StructuredQR.h" local="no" imported="no">jrl-qp/structured/StructuredQR.h</includes>
    <class kind="class">jrl::qp::experimental::BlockGISolver</class>
    <class kind="struct">jrl::qp::experimental::BlockGISolver::Problem</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
  </compound>
  <compound kind="file">
    <name>BoxAndSingleConstraintSolver.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/experimental/</path>
    <filename>BoxAndSingleConstraintSolver_8h.html</filename>
    <includes id="GoldfarbIdnaniSolver_8h" name="GoldfarbIdnaniSolver.h" local="no" imported="no">jrl-qp/GoldfarbIdnaniSolver.h</includes>
    <includes id="problems_8h" name="problems.h" local="no" imported="no">jrl-qp/test/problems.h</includes>
    <class kind="class">jrl::qp::experimental::BoxAndSingleConstraintSolver</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>LeastSquareProblem JRLQP_DLLAPI</type>
      <name>generateBoxAndSingleConstraintProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ae4b1523748e3f22a5a71dae884f44cd6</anchor>
      <arglist>(int nbVar, bool act, double actLevel=0.5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GoldfarbIdnaniSolver.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/experimental/</path>
    <filename>experimental_2GoldfarbIdnaniSolver_8h.html</filename>
    <includes id="DualSolver_8h" name="DualSolver.h" local="no" imported="no">jrl-qp/DualSolver.h</includes>
    <class kind="class">jrl::qp::experimental::GoldfarbIdnaniSolver</class>
    <class kind="struct">jrl::qp::experimental::GoldfarbIdnaniSolver::Problem</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
  </compound>
  <compound kind="file">
    <name>GoldfarbIdnaniSolver.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>GoldfarbIdnaniSolver_8h.html</filename>
    <includes id="DualSolver_8h" name="DualSolver.h" local="no" imported="no">jrl-qp/DualSolver.h</includes>
    <class kind="class">jrl::qp::GoldfarbIdnaniSolver</class>
    <class kind="struct">jrl::qp::GoldfarbIdnaniSolver::Problem</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSet.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>ActiveSet_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <class kind="class">jrl::qp::internal::ActiveSet</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>ac23c4583f9e2927acaf832c30458833a</anchor>
      <arglist>(std::ostream &amp;os, const ActiveSet &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintNormal.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>ConstraintNormal_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <includes id="SelectedConstraint_8h" name="SelectedConstraint.h" local="no" imported="no">jrl-qp/internal/SelectedConstraint.h</includes>
    <includes id="toMatlab_8h" name="toMatlab.h" local="no" imported="no">jrl-qp/utils/toMatlab.h</includes>
    <class kind="class">jrl::qp::internal::ConstraintNormal</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
  </compound>
  <compound kind="file">
    <name>memoryChecks.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>memoryChecks_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>check_that_malloc_is_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a26636a70e1bc6abc062a1c934bc3b27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>set_is_malloc_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>af860e6b58138f3258af7badafc963379</anchor>
      <arglist>(bool allow)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>meta.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>meta_8h.html</filename>
    <class kind="struct">jrl::qp::internal::is_base</class>
    <class kind="class">jrl::qp::internal::always_true</class>
    <class kind="class">jrl::qp::internal::always_false</class>
    <class kind="struct">jrl::qp::internal::identity</class>
    <class kind="struct">jrl::qp::internal::to_underlying_type</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||(std::is_same_v&lt; T, Base &gt;||derives_from&lt; T, Base &gt;())), int &gt;</type>
      <name>enable_for_t</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a0adce44e5de1deec06a0bc26cd3467d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||derives_from&lt; T, Base &gt;()), int &gt;</type>
      <name>enable_for_templated_t</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>ae6160ea153be0ec4ab02997407a6adab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_enum_v&lt; T &gt;, to_underlying_type, identity &gt;</type>
      <name>cast_as_underlying_if_enum</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a9222c7f429c9c1c4e65bb38b2252e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>derives_from</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>afb8425a498d36cc736a81a867f44b045</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrthonormalSequence.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>OrthonormalSequence_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="SingleNZSegmentVector_8h" name="SingleNZSegmentVector.h" local="no" imported="no">jrl-qp/internal/SingleNZSegmentVector.h</includes>
    <includes id="Workspace_8h" name="Workspace.h" local="no" imported="no">jrl-qp/internal/Workspace.h</includes>
    <class kind="class">jrl::qp::internal::ElemOrthonormalSequence</class>
    <class kind="class">jrl::qp::internal::OrthonormalSequence</class>
    <class kind="class">jrl::qp::internal::PartitionnedQ</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OSeqType</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>aa0759fb36800658279d39fb5949361ec</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361eca5196f1040c636101b5797c3cbc926613">Householder</enumvalue>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361eca0734c05ef4e55a702e6c121ea6609d44">Givens</enumvalue>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361ecafc77ea6ca6b9d7a68b7820f4cc96496b">Permutation</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>SelectedConstraint.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>SelectedConstraint_8h.html</filename>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <class kind="class">jrl::qp::internal::SelectedConstraint</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
  </compound>
  <compound kind="file">
    <name>SingleNZSegmentVector.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>SingleNZSegmentVector_8h.html</filename>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <class kind="class">jrl::qp::internal::SingleNZSegmentVector</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
  </compound>
  <compound kind="file">
    <name>TerminationType.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>TerminationType_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <class kind="class">jrl::qp::internal::TerminationType</class>
    <class kind="class">jrl::qp::internal::InitTermination</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Workspace.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/internal/</path>
    <filename>Workspace_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <class kind="struct">jrl::qp::internal::NotConst</class>
    <class kind="class">jrl::qp::internal::Workspace</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="typedef">
      <type>decltype(internal::Workspace&lt; double &gt;().asVector(0))</type>
      <name>WVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a12f43caa2519ab8cc2e0a04d42f61422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::add_const_t&lt; internal::Workspace&lt; double &gt; &gt;().asVector(0))</type>
      <name>WConstVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a961f733f98e4cdf72a086084d9ca0777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SolverOptions.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/</path>
    <filename>SolverOptions_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <class kind="struct">jrl::qp::SolverOptions</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredC.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/structured/</path>
    <filename>StructuredC_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="SingleNZSegmentVector_8h" name="SingleNZSegmentVector.h" local="no" imported="no">jrl-qp/internal/SingleNZSegmentVector.h</includes>
    <class kind="class">jrl::qp::structured::StructuredC</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredG.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/structured/</path>
    <filename>StructuredG_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="SingleNZSegmentVector_8h" name="SingleNZSegmentVector.h" local="no" imported="no">jrl-qp/internal/SingleNZSegmentVector.h</includes>
    <class kind="class">jrl::qp::structured::StructuredG</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredJ.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/structured/</path>
    <filename>StructuredJ_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="OrthonormalSequence_8h" name="OrthonormalSequence.h" local="no" imported="no">jrl-qp/internal/OrthonormalSequence.h</includes>
    <includes id="SelectedConstraint_8h" name="SelectedConstraint.h" local="no" imported="no">jrl-qp/internal/SelectedConstraint.h</includes>
    <includes id="Workspace_8h" name="Workspace.h" local="no" imported="no">jrl-qp/internal/Workspace.h</includes>
    <includes id="StructuredC_8h" name="StructuredC.h" local="no" imported="no">jrl-qp/structured/StructuredC.h</includes>
    <includes id="StructuredG_8h" name="StructuredG.h" local="no" imported="no">jrl-qp/structured/StructuredG.h</includes>
    <class kind="class">jrl::qp::structured::StructuredJ</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredQR.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/structured/</path>
    <filename>StructuredQR_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="OrthonormalSequence_8h" name="OrthonormalSequence.h" local="no" imported="no">jrl-qp/internal/OrthonormalSequence.h</includes>
    <includes id="SelectedConstraint_8h" name="SelectedConstraint.h" local="no" imported="no">jrl-qp/internal/SelectedConstraint.h</includes>
    <includes id="Workspace_8h" name="Workspace.h" local="no" imported="no">jrl-qp/internal/Workspace.h</includes>
    <includes id="StructuredC_8h" name="StructuredC.h" local="no" imported="no">jrl-qp/structured/StructuredC.h</includes>
    <includes id="StructuredG_8h" name="StructuredG.h" local="no" imported="no">jrl-qp/structured/StructuredG.h</includes>
    <class kind="class">jrl::qp::structured::StructuredQR</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>kkt.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/test/</path>
    <filename>kkt_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="problems_8h" name="problems.h" local="no" imported="no">jrl-qp/test/problems.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a38df76f4aae127fb36c38841160c5d35</anchor>
      <arglist>(const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a74b6ea3245d0cdeddbb545c62a983159</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>afa6a0f34c14c947a9bdb6a6c6496d857</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>af1cd5934919b77d33bb2bea7d8533eac</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a0c3338b4e05cc6981cbed334f436e8f0</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab46e4cc20b4a77480d9a1bf7ec054456</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a89c4801e6c61c6d4d4599addac78963f</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a24de9eb83b0bce6960b8fe3665a82ec5</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ad456662bbb7afae7995357770219db12</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const FeasibilityConstraints &amp;cstr, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>problems.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/test/</path>
    <filename>problems_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <class kind="struct">jrl::qp::test::FeasibilityConstraints</class>
    <class kind="struct">jrl::qp::test::SeparatedFeasibilityConstraints</class>
    <class kind="struct">jrl::qp::test::LeastSquareProblem</class>
    <class kind="struct">jrl::qp::test::QPProblem</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="variable">
      <type>struct JRLQP_DLLAPI</type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab1dd5e41b148ceade20a5bbe4e5fdedf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomMatrices.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/test/</path>
    <filename>randomMatrices_8h.html</filename>
    <class kind="struct">jrl::qp::test::scalar_normal_random_op</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>auto</type>
      <name>randnVec</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a2663831861c4e4e3f32c85248a423de9</anchor>
      <arglist>(Eigen::Index size, double mean=0, double stddev=1)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>randnMat</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a65476347bd4aeb0e6672d90f3fe0d97a</anchor>
      <arglist>(Eigen::Index rows, Eigen::Index cols, double mean=0, double stddev=1)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>randUnitVec</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab7fa5aa12944128ba9833c258e4c833e</anchor>
      <arglist>(Eigen::Index size)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>randOrtho</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a0f71bb73a591673a09cb82c072a2bc66</anchor>
      <arglist>(Eigen::Index size, bool special=false)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>randn</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a2211b116ed574f7148f2974b18d1efc8</anchor>
      <arglist>(Eigen::Index rows, Eigen::Index cols, Eigen::Index rank=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
      <name>randDependent</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ae07c8255e808b225b4c77dfe8d555931</anchor>
      <arglist>(Eigen::Index cols, Eigen::Index rowsA, Eigen::Index rankA, Eigen::Index rowsB, Eigen::Index rankB, Eigen::Index rankAB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomProblems.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/test/</path>
    <filename>randomProblems_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="problems_8h" name="problems.h" local="no" imported="no">jrl-qp/test/problems.h</includes>
    <class kind="struct">jrl::qp::test::ProblemCharacteristics</class>
    <class kind="struct">jrl::qp::test::RandomLeastSquare</class>
    <class kind="struct">jrl::qp::test::RandomLeastSquare::KKT</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>RandomLeastSquare JRLQP_DLLAPI</type>
      <name>randomProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a562af6c4f0f6a140519a7b6b1d1b3281</anchor>
      <arglist>(const ProblemCharacteristics &amp;characs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/utils/</path>
    <filename>debug_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_ID</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a44ee27d1d83fe83986640b965cfd2455</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_APPLY</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a4619c0c60951c239ddd38a4ddd5ffbcd</anchor>
      <arglist>(macro,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_NARG</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ad6a8f61dfce362aaf9f20ec10903189e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_NARG_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a26479c0777b34e04563114c9c208943a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_ARG_N</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a177dda44ecc66aba9493cc6bc14eadb4</anchor>
      <arglist>(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, N,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_PP_RSEQ_N</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ad60943a8e16f50b82e129b9bc6398483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_CHOOSE_AUTO_NAME_START</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ad2334ae1a10c6f0aa3b0bb80138d0194</anchor>
      <arglist>(count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a7309e4978e6a8441d6dad7d7d75a9aae</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG1</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a17d4ef19160a14a0a6177d60687988ce</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG2</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ad16419569da05218faf75413c4c26690</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG3</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a0245b1072aab3d3e91208fdaede84c56</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG4</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a70bf637076b0329939c2764112350cb0</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG5</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a1254917cd72b15516bfeae4037d7b29d</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG6</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a8f0f05fe1d005fe8063058b536429405</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG7</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a0642cdd735c2ff2c59a23cef9246fdee</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG8</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a7c3076781f76d28d1a4023a19d012b90</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG9</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a589335bd1cc9d6826f868806231ca7c7</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_AUTO_NAME_ARG10</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aa66f4d4504ddb34675582d117ed73b24</anchor>
      <arglist>(x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_ENABLE_LOG_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a83d3f53c3c3aab940986f12b26763eb9</anchor>
      <arglist>(macro,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_ENABLE_DEBUG_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a82a0d7493be62a7351abb9c7ac695206</anchor>
      <arglist>(macro,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a2bd0e4db7525210915b51b6acffef837</anchor>
      <arglist>(logger, flags,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_AS_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aa93a4494bc7215e968f3e54fa7d0b3cd</anchor>
      <arglist>(logger, flags,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a49aea847db91233c9a07569d9d788c12</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DBG</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a02a1c62fcb6fb371ec8f236c4b3673c8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_AS</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aa99dc5c5ba0c16dd26287a5ad77aa331</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DBG_AS</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a7cb760fe8c075b64e39acef7f1223fed</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_COMMENT</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a6b4990b946544bf704e5e62edf9992b6</anchor>
      <arglist>(logger, flag,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DBG_COMMENT</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aba4b1da548c543974c42de318eac0e0e</anchor>
      <arglist>(logger, flag,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_NEW_ITER</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ae6b524d16d233f29bbbf3a410f124a9e</anchor>
      <arglist>(logger, it)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DBG_NEW_ITER</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aad3eca6a5f8d12218ba3a558373f854d</anchor>
      <arglist>(logger, it)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_LOG_RESET</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>aff6fac7327ee0ca9066edd57c13fb9d7</anchor>
      <arglist>(logger)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DBG_RESET</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a1d814944fdc3c711d6602d077b464cb3</anchor>
      <arglist>(logger)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JRLQP_DEBUG_ONLY</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>ab1da2a8f7643689edf7f65d2f45da84b</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>NO_LOG_</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a2a202052f05a771817ab9cf9ebb2efd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>DEBUG_OUTPUT</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>a54365eb3f09fbb10800ebd8c81a03073</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>enumsIO.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/utils/</path>
    <filename>enumsIO_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">jrl-qp/enums.h</includes>
    <member kind="function">
      <type>JRLQP_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>enumsIO_8h.html</anchorfile>
      <anchor>a4cff36867f4f7ea750cef0edd5eefa86</anchor>
      <arglist>(std::ostream &amp;os, jrl::qp::TerminationStatus s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/utils/</path>
    <filename>Logger_8h.html</filename>
    <includes id="api_8h" name="api.h" local="no" imported="no">jrl-qp/api.h</includes>
    <includes id="defs_8h" name="defs.h" local="no" imported="no">jrl-qp/defs.h</includes>
    <includes id="meta_8h" name="meta.h" local="no" imported="no">jrl-qp/internal/meta.h</includes>
    <includes id="toMatlab_8h" name="toMatlab.h" local="no" imported="no">jrl-qp/utils/toMatlab.h</includes>
    <class kind="class">jrl::qp::utils::Logger</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::utils</namespace>
  </compound>
  <compound kind="file">
    <name>toMatlab.h</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/include/jrl-qp/utils/</path>
    <filename>toMatlab_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="no" imported="no">jrl-qp/internal/meta.h</includes>
    <class kind="class">jrl::qp::utils::toMatlab</class>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::utils</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacejrl_1_1qp_1_1utils.html</anchorfile>
      <anchor>a0eb26b851348ed93a47704280c68b995</anchor>
      <arglist>(std::ostream &amp;o, const toMatlab &amp;tom)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_eigen_ref_v</name>
      <anchorfile>namespacejrl_1_1qp_1_1utils.html</anchorfile>
      <anchor>a4023f6078d4e0b5ae15f27313e65c6a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blockArrowLLT.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/decomposition/</path>
    <filename>blockArrowLLT_8cpp.html</filename>
    <includes id="blockArrowLLT_8h" name="blockArrowLLT.h" local="no" imported="no">jrl-qp/decomposition/blockArrowLLT.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::decomposition</namespace>
    <member kind="function">
      <type>bool</type>
      <name>blockArrowLLT_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a642f87ad7947600ff28ad25113c20219</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>blockArrowLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a2f65392b0bcd4dabf6cf997d6d8898a3</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockArrowLSolve_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>aeb2c2953ca0f7fb5170758f574b92a7f</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, MatrixRef M, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a944556805b9fcec753b8a7622c5e796e</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockArrowLTransposeSolve_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ae88cb7056884a3725d6efeef2a53202f</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, MatrixRef M, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ada4d609948373c6e0a7ecad04787dafb</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triBlockDiagLLT.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/decomposition/</path>
    <filename>triBlockDiagLLT_8cpp.html</filename>
    <includes id="triBlockDiagLLT_8h" name="triBlockDiagLLT.h" local="no" imported="no">jrl-qp/decomposition/triBlockDiagLLT.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::decomposition</namespace>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>triBlockDiagLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab12e8c947e5c397e5e5384ed017369b5</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a9a9937ec7cc2b641254c81d004cf7ee8</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int start=0)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab817f90e5d71975926a9a2e8c2c43ffd</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int end=-1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DualSolver.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/</path>
    <filename>DualSolver_8cpp.html</filename>
    <includes id="DualSolver_8h" name="DualSolver.h" local="no" imported="no">jrl-qp/DualSolver.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>BlockGISolver.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/experimental/</path>
    <filename>BlockGISolver_8cpp.html</filename>
    <includes id="BlockGISolver_8h" name="BlockGISolver.h" local="no" imported="no">jrl-qp/experimental/BlockGISolver.h</includes>
    <includes id="ConstraintNormal_8h" name="ConstraintNormal.h" local="no" imported="no">jrl-qp/internal/ConstraintNormal.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
  </compound>
  <compound kind="file">
    <name>BoxAndSingleConstraintSolver.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/experimental/</path>
    <filename>BoxAndSingleConstraintSolver_8cpp.html</filename>
    <includes id="BoxAndSingleConstraintSolver_8h" name="BoxAndSingleConstraintSolver.h" local="no" imported="no">jrl-qp/experimental/BoxAndSingleConstraintSolver.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>LeastSquareProblem JRLQP_DLLAPI</type>
      <name>generateBoxAndSingleConstraintProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ae4b1523748e3f22a5a71dae884f44cd6</anchor>
      <arglist>(int nbVar, bool act, double actLevel=0.5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GoldfarbIdnaniSolver.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/experimental/</path>
    <filename>experimental_2GoldfarbIdnaniSolver_8cpp.html</filename>
    <includes id="experimental_2GoldfarbIdnaniSolver_8h" name="GoldfarbIdnaniSolver.h" local="no" imported="no">jrl-qp/experimental/GoldfarbIdnaniSolver.h</includes>
    <includes id="ConstraintNormal_8h" name="ConstraintNormal.h" local="no" imported="no">jrl-qp/internal/ConstraintNormal.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::experimental</namespace>
    <member kind="typedef">
      <type>Eigen::JacobiRotation&lt; double &gt;</type>
      <name>Givens</name>
      <anchorfile>experimental_2GoldfarbIdnaniSolver_8cpp.html</anchorfile>
      <anchor>a66abf55e355e7df1283ea73e2e3d02e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GoldfarbIdnaniSolver.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/</path>
    <filename>GoldfarbIdnaniSolver_8cpp.html</filename>
    <includes id="GoldfarbIdnaniSolver_8h" name="GoldfarbIdnaniSolver.h" local="no" imported="no">jrl-qp/GoldfarbIdnaniSolver.h</includes>
    <includes id="experimental_2GoldfarbIdnaniSolver_8h" name="GoldfarbIdnaniSolver.h" local="no" imported="no">jrl-qp/experimental/GoldfarbIdnaniSolver.h</includes>
    <includes id="ConstraintNormal_8h" name="ConstraintNormal.h" local="no" imported="no">jrl-qp/internal/ConstraintNormal.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSet.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/internal/</path>
    <filename>ActiveSet_8cpp.html</filename>
    <includes id="ActiveSet_8h" name="ActiveSet.h" local="no" imported="no">jrl-qp/internal/ActiveSet.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>ac23c4583f9e2927acaf832c30458833a</anchor>
      <arglist>(std::ostream &amp;os, const ActiveSet &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memoryChecks.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/internal/</path>
    <filename>memoryChecks_8cpp.html</filename>
    <includes id="memoryChecks_8h" name="memoryChecks.h" local="no" imported="no">jrl-qp/internal/memoryChecks.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_malloc_allowed_impl</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>aae7ef3e5987a86cb20f10d20292f7a34</anchor>
      <arglist>(bool update, bool new_value=false)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>check_that_malloc_is_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a26636a70e1bc6abc062a1c934bc3b27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>set_is_malloc_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>af860e6b58138f3258af7badafc963379</anchor>
      <arglist>(bool allow)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrthonormalSequence.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/internal/</path>
    <filename>OrthonormalSequence_8cpp.html</filename>
    <includes id="OrthonormalSequence_8h" name="OrthonormalSequence.h" local="no" imported="no">jrl-qp/internal/OrthonormalSequence.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::internal</namespace>
  </compound>
  <compound kind="file">
    <name>SolverOptions.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/</path>
    <filename>SolverOptions_8cpp.html</filename>
    <includes id="SolverOptions_8h" name="SolverOptions.h" local="no" imported="no">jrl-qp/SolverOptions.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredC.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/structured/</path>
    <filename>StructuredC_8cpp.html</filename>
    <includes id="StructuredC_8h" name="StructuredC.h" local="no" imported="no">jrl-qp/structured/StructuredC.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredG.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/structured/</path>
    <filename>StructuredG_8cpp.html</filename>
    <includes id="StructuredG_8h" name="StructuredG.h" local="no" imported="no">jrl-qp/structured/StructuredG.h</includes>
    <includes id="blockArrowLLT_8h" name="blockArrowLLT.h" local="no" imported="no">jrl-qp/decomposition/blockArrowLLT.h</includes>
    <includes id="triBlockDiagLLT_8h" name="triBlockDiagLLT.h" local="no" imported="no">jrl-qp/decomposition/triBlockDiagLLT.h</includes>
  </compound>
  <compound kind="file">
    <name>StructuredJ.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/structured/</path>
    <filename>StructuredJ_8cpp.html</filename>
    <includes id="StructuredJ_8h" name="StructuredJ.h" local="no" imported="no">jrl-qp/structured/StructuredJ.h</includes>
    <includes id="debug_8h" name="debug.h" local="no" imported="no">jrl-qp/utils/debug.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>StructuredQR.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/structured/</path>
    <filename>StructuredQR_8cpp.html</filename>
    <includes id="StructuredQR_8h" name="StructuredQR.h" local="no" imported="no">jrl-qp/structured/StructuredQR.h</includes>
    <includes id="debug_8h" name="debug.h" local="no" imported="no">jrl-qp/utils/debug.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::structured</namespace>
  </compound>
  <compound kind="file">
    <name>kkt.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/test/</path>
    <filename>kkt_8cpp.html</filename>
    <includes id="kkt_8h" name="kkt.h" local="no" imported="no">jrl-qp/test/kkt.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>aea47089d11bc2b0bbac4a73a31816443</anchor>
      <arglist>([[maybe_unused]] int n, [[maybe_unused]] const MatrixConstRef &amp;C, [[maybe_unused]] const VectorConstRef &amp;bl, [[maybe_unused]] const VectorConstRef &amp;bu, [[maybe_unused]] const VectorConstRef &amp;xl, [[maybe_unused]] const VectorConstRef &amp;xu, [[maybe_unused]] bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>af9d8456e41e5e586a9fd30b12fc95a9c</anchor>
      <arglist>([[maybe_unused]] const MatrixConstRef &amp;G, [[maybe_unused]] const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a697d39ee1edd58eff4e678057a42aa50</anchor>
      <arglist>([[maybe_unused]] const VectorConstRef &amp;x, [[maybe_unused]] const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a40e6d5144472f3a524e51a95c6983318</anchor>
      <arglist>([[maybe_unused]] const VectorConstRef &amp;x, [[maybe_unused]] const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>af1cd5934919b77d33bb2bea7d8533eac</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a0c3338b4e05cc6981cbed334f436e8f0</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab46e4cc20b4a77480d9a1bf7ec054456</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a89c4801e6c61c6d4d4599addac78963f</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a24de9eb83b0bce6960b8fe3665a82ec5</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ad456662bbb7afae7995357770219db12</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const FeasibilityConstraints &amp;cstr, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>problems.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/test/</path>
    <filename>problems_8cpp.html</filename>
    <includes id="problems_8h" name="problems.h" local="no" imported="no">jrl-qp/test/problems.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
  </compound>
  <compound kind="file">
    <name>randomProblems.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/test/</path>
    <filename>randomProblems_8cpp.html</filename>
    <includes id="randomMatrices_8h" name="randomMatrices.h" local="no" imported="no">jrl-qp/test/randomMatrices.h</includes>
    <includes id="randomProblems_8h" name="randomProblems.h" local="no" imported="no">jrl-qp/test/randomProblems.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::test</namespace>
    <member kind="function">
      <type>RandomLeastSquare JRLQP_DLLAPI</type>
      <name>randomProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a562af6c4f0f6a140519a7b6b1d1b3281</anchor>
      <arglist>(const ProblemCharacteristics &amp;characs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disp</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab4551a4746af157fa3a2ec0514d294c5</anchor>
      <arglist>(const std::string &amp;name, const MatrixBase&lt; Derived &gt; &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>enumsIO.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/utils/</path>
    <filename>enumsIO_8cpp.html</filename>
    <includes id="enumsIO_8h" name="enumsIO.h" local="no" imported="no">jrl-qp/utils/enumsIO.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>enumsIO_8cpp.html</anchorfile>
      <anchor>af2f82eb407403b2be98dadb6f4c5d207</anchor>
      <arglist>(std::ostream &amp;os, jrl::qp::TerminationStatus s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.cpp</name>
    <path>/home/runner/work/jrl-qp/jrl-qp/src/utils/</path>
    <filename>Logger_8cpp.html</filename>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">jrl-qp/utils/Logger.h</includes>
    <namespace>jrl</namespace>
    <namespace>jrl::qp</namespace>
    <namespace>jrl::qp::utils</namespace>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::ActiveSet</name>
    <filename>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</filename>
    <member kind="function">
      <type></type>
      <name>ActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>ad76aa3be8579cd1d033b82b4887706a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a1b964790d490d4fffb85aff87df52e52</anchor>
      <arglist>(int nCstr, int nBnd=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a6f57187e69cee372bf3e832bec81eb2e</anchor>
      <arglist>(const std::vector&lt; ActivationStatus &gt; &amp;as, int nBnd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a195caab2b0d0cf3931cb7dc4b00e2dc3</anchor>
      <arglist>(int nCstr, int nBnd=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a202d30c86364c55c0914e5c50e5709c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a9f6b57371251307770aa1d69b7970f30</anchor>
      <arglist>(int cstrIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveBnd</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a63aa5e5d309567b22396bb434ca0c1f0</anchor>
      <arglist>(int bndIdx) const</arglist>
    </member>
    <member kind="function">
      <type>ActivationStatus</type>
      <name>activationStatus</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a193b4a77fa62d21c0b1eb65e7fff51ce</anchor>
      <arglist>(int cstrIdx) const</arglist>
    </member>
    <member kind="function">
      <type>ActivationStatus</type>
      <name>activationStatusBnd</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a7a362fae95ed279635aa6aafb5f1e176</anchor>
      <arglist>(int bndIdx) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ActivationStatus &gt; &amp;</type>
      <name>activationStatus</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>afcb6daf54db598fccfce38c71177721a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a9f269a810d2287e8818721b21381c4aa</anchor>
      <arglist>(int activeIdx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a996691a94e9f8715490338b8ea48466e</anchor>
      <arglist>(int cstrIdx, ActivationStatus status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a7d52b4422cf25cca91ac0c1ffb4d3fd4</anchor>
      <arglist>(int activeIdx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbCstr</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a4037e6f04e033feb5061e476b945ba23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbBnd</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>ae310a82d849a4734b61506c54273b0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbAll</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>aaf46e4b12ff48ae4c39a7780ab0ea3cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveCstr</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>abea466119b8642a2bf13f764c3124b05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveEquality</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a1c4046ebffd7c67614cbae88aab704e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveInequality</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a15225c1e7bb222f84643609d7da1aad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveLowerInequality</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a56eb9ea9e655265c15f77b399ce76053</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveUpperInequality</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a9bb5f74aefdf808201e55dba8252155d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveBound</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a4a35ba59abf19fd419f75a0b3c08065a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveLowerBound</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a1a34f706c725f641fe1d5a72becd59fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbActiveUpperBound</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>a62cde1372396867b9500a10802d0e4a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbFixedVariable</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ActiveSet.html</anchorfile>
      <anchor>ad2ff188466c76bc58044b9838ce08dc1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::always_false</name>
    <filename>classjrl_1_1qp_1_1internal_1_1always__false.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::always_true</name>
    <filename>classjrl_1_1qp_1_1internal_1_1always__true.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>jrl::qp::experimental::BlockGISolver</name>
    <filename>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</filename>
    <base>jrl::qp::DualSolver</base>
    <class kind="struct">jrl::qp::experimental::BlockGISolver::Problem</class>
    <member kind="function">
      <type></type>
      <name>BlockGISolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a5041777960ed3720e78676c179998016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockGISolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a82976ed7a29ade9fd650a00cfb4f7513</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockGISolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a893c76eb6e5d818046c725ddc2ec01b8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>TerminationStatus</type>
      <name>solve</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>aa5b084508e40ebfbaf3c9046fb837c5a</anchor>
      <arglist>(const structured::StructuredG &amp;G, const VectorConstRef &amp;a, const structured::StructuredC &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, const std::vector&lt; ActivationStatus &gt; &amp;as={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::InitTermination</type>
      <name>init_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a8e7ba1ba679524fd62559557c62629aa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SelectedConstraint</type>
      <name>selectViolatedConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a17743ca8c60aa1ff08c5c683c5f1ccb4</anchor>
      <arglist>(const VectorConstRef &amp;x) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeStep_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>ad26d72a087831165a67f126fa9f5e3a0</anchor>
      <arglist>(VectorRef z, VectorRef r, const internal::SelectedConstraint &amp;sc) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StepLength</type>
      <name>computeStepLength_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>abb9e04d307219c853411ef172aa9b4e2</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;x, const VectorConstRef &amp;u, const VectorConstRef &amp;z, const VectorConstRef &amp;r) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a61af909e4e058e0cfe67c033f1f8061e</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a51eb102dfe99f35ddd75294cfc53b5ee</anchor>
      <arglist>(int l) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dot_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>ae391c8f190c38f81d3a33052bc55f9ea</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;z) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a34841fef94d320a6b58017980734ff4e</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>processInitialActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a53bb466c97134321d3d742f5c751a1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>initializeComputationData</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a39c2958307ae7085b18bd3ffb3975fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>initializePrimalDualPoints</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>af68e374ffaceb9aa467e9c67701c893b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_d_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a4bae229fb8d8f705aa62b36546626820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>structured::StructuredJ</type>
      <name>J_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a59cd1066062615a5a0426dffb3f7b37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>structured::StructuredQR</type>
      <name>QR_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>ae9b4471e29ade1e5c41a62a40ef5910f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_cx_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>ad63b83bd90d1e8b4a0d79a70c725cc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_bact_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>afd65f34f0a9b01c589079de26334ce2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Problem</type>
      <name>pb_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BlockGISolver.html</anchorfile>
      <anchor>a8bd4db0c685e520ce42645639db1546a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::experimental::BoxAndSingleConstraintSolver</name>
    <filename>classjrl_1_1qp_1_1experimental_1_1BoxAndSingleConstraintSolver.html</filename>
    <base>jrl::qp::experimental::GoldfarbIdnaniSolver</base>
    <member kind="function">
      <type></type>
      <name>BoxAndSingleConstraintSolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BoxAndSingleConstraintSolver.html</anchorfile>
      <anchor>a6d67bd429929ac99876577447b1e053f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxAndSingleConstraintSolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BoxAndSingleConstraintSolver.html</anchorfile>
      <anchor>a9e779c82e08910c1233690f17eca0f0f</anchor>
      <arglist>(int nbVar)</arglist>
    </member>
    <member kind="function">
      <type>TerminationStatus</type>
      <name>solve</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BoxAndSingleConstraintSolver.html</anchorfile>
      <anchor>af05b968e48832996fd377a80696bfb36</anchor>
      <arglist>(const VectorConstRef &amp;x0, const VectorConstRef &amp;c, double bl, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual internal::InitTermination</type>
      <name>init_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1BoxAndSingleConstraintSolver.html</anchorfile>
      <anchor>aea0459bf649291be0fcc5046a6334206</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::ConstraintNormal</name>
    <filename>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstraintNormal</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>a653e2751d2252e8565ddd0f3631b7de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintNormal</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>a83579b54b72db82daf43916264c92d21</anchor>
      <arglist>(const MatrixConstRef &amp;C, int p, ActivationStatus status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintNormal</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>ae8ed9272e7ac813a43164ea5814180be</anchor>
      <arglist>(const MatrixConstRef &amp;C, const SelectedConstraint &amp;sc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintNormal</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>aeb60b016eee13c39c2ab286bc3a36f0f</anchor>
      <arglist>(const ConstraintNormal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintNormal</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>ab6f5108f22016a2cca1dd00caacb9468</anchor>
      <arglist>(ConstraintNormal &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintNormal &amp;</type>
      <name>operator=</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>ab53754172e2e38224be5bfc1ae56db2d</anchor>
      <arglist>(const ConstraintNormal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>a23cf9b5a46c12fe84d270e78fd04950f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bndIndex</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>a5332f5a45dff36c24cefbbcdefa96676</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActivationStatus</type>
      <name>status</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>adbc838068cb19906f8882e6c16553b0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preMultiplyByMt</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>aa448d4ce25549ba72e8ba641953ac299</anchor>
      <arglist>(VectorRef out, const MatrixConstRef &amp;M) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>ab733ad5757ba2f4ef34b7fb6b9cf8089</anchor>
      <arglist>(const VectorConstRef &amp;v) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ConstraintNormal.html</anchorfile>
      <anchor>a807e0d582d7119ebb5fdb317303fc4ae</anchor>
      <arglist>(std::ostream &amp;os, const ConstraintNormal &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::DualSolver</name>
    <filename>classjrl_1_1qp_1_1DualSolver.html</filename>
    <class kind="struct">jrl::qp::DualSolver::StepLength</class>
    <member kind="function">
      <type></type>
      <name>DualSolver</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a2edb0d88debba590c454ec4194e1d3f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualSolver</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a559bc4ba4c5d57f8376319ec2fcafc2d</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DualSolver</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a7b66ef27f42d721af6373d589ea005d8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a8f4a772bd7e5716de539456dfb7a845a</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>options</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>afcd7433502a48cfb77299c64fccd0008</anchor>
      <arglist>(const SolverOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>WConstVector</type>
      <name>solution</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a485a0796d7adf22054d6dfe4e810a6e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WConstVector</type>
      <name>multipliers</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a7f782a38554b3a745fdf944987aa92e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>objectiveValue</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ae8282c4e7de404ca4a053efff8481371</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a2fa3996908841e4ed4d3c7f1bbb127a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ActivationStatus &gt; &amp;</type>
      <name>activeSet</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>af5a9d65d11cf6b60e512bde998da8576</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a883e28bd95225bc7f726ceaa266b2b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TerminationStatus</type>
      <name>solve</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ad67432ab9cb75b1b8578cbfe6edd4ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TerminationStatus</type>
      <name>terminate</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a35a22e92e860b82ef59083182266b1c2</anchor>
      <arglist>(TerminationStatus status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::InitTermination</type>
      <name>init</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>adf5b66bd8f52f85c9c04f50e54dde07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SelectedConstraint</type>
      <name>selectViolatedConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>af07db89f460b1ccb8193f3a8e0e96531</anchor>
      <arglist>(const VectorConstRef &amp;x) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeStep</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ab003d4b52c24290488bae1ec2c27864f</anchor>
      <arglist>(VectorRef z, VectorRef r, const internal::SelectedConstraint &amp;sc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StepLength</type>
      <name>computeStepLength</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ac958b17d7806a545448569f789dc2590</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;x, const VectorConstRef &amp;u, const VectorConstRef &amp;z, const VectorConstRef &amp;r) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ad557cd4fc4ecff28a5906b01a622d1e8</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>aa8f5542740bea0db7e1e50d0e280d178</anchor>
      <arglist>(int l, VectorRef u)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>dot</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>afa9730eef19ebf95ba1f04d9d5cfe5a5</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;z)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual internal::InitTermination</type>
      <name>init_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a07030881e056868615db82bfcfd3c612</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual internal::SelectedConstraint</type>
      <name>selectViolatedConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a644bc226af57551c09b6414e15ecf286</anchor>
      <arglist>(const VectorConstRef &amp;x) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>computeStep_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>aa6898a1fef433dfa88e8c6c4097b4f07</anchor>
      <arglist>(VectorRef z, VectorRef r, const internal::SelectedConstraint &amp;sc) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual StepLength</type>
      <name>computeStepLength_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ab679771e83a52147c439fce1aaa19f15</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;x, const VectorConstRef &amp;u, const VectorConstRef &amp;z, const VectorConstRef &amp;r) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>addConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>aa1ca3f3a129348df0be2269efc667945</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>removeConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a8997464678859277471b64ea525220d0</anchor>
      <arglist>(int l)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>dot_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a46f899ca18ee72f419172bd5a3211950</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;z)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>resize_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a44d16975260ea1d3402ed753854247a4</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverOptions</type>
      <name>options_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a040808e9165016e1a0fd76fcd46a2e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>utils::Logger</type>
      <name>log_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a0b8954ba8dc452d9917a7e029b490542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>it_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ad51f543b6ad18ede9678298467656dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbVar_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a9cd7c53a221d7ac34b8f3778316d6451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::ActiveSet</type>
      <name>A_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a4521690f59a7f286023f6fbc5d92cbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>f_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>ab1c79adacf5399afc53c63ef3fea1ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_x_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a22a3f5c0e38479a3b3cfc168395e30f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_z_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a202385003f707c47cad790647fc3f890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_u_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a00fa0daab6791bb898705e6ac481935d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_r_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>a56ec60d816d56e44924591a32a0b7983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needToExpandMultipliers_</name>
      <anchorfile>classjrl_1_1qp_1_1DualSolver.html</anchorfile>
      <anchor>aa1ee85d727856bdbda3214a2dd12e2cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::ElemOrthonormalSequence</name>
    <filename>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</filename>
    <member kind="function">
      <type></type>
      <name>ElemOrthonormalSequence</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>ab46d33fb3093529db4dcd61ae14a0858</anchor>
      <arglist>(OSeqType type, int n, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>aa0d4bb7e49af68cd46b039b22015b59f</anchor>
      <arglist>(const Eigen::HouseholderSequence&lt; VectorType, CoeffType &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a490cc02cab86f549be2a2d25b5a19fa3</anchor>
      <arglist>(const Givens &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>ad1c46d9cdc08be51aeb33db7aecd4d07</anchor>
      <arglist>(const VectorConstRef &amp;essential, double tau)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a38a37eed4117a94fca13b5b02990e211</anchor>
      <arglist>(VectorRef v, int start, int size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransposeToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>af7f5a30cba61ee08b3a129759c08ce8d</anchor>
      <arglist>(VectorRef v, int start, int size) const</arglist>
    </member>
    <member kind="function">
      <type>OSeqType</type>
      <name>type</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>ab48be8e45cf1c6b804a577fbc45c980e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a78b33e6e5b91a4cc123f5df6dffecced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a5679c5e0353d1899e89907b85af52603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a290c7d62a5fe671b0cdbad81cf77b5ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>toDense</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1ElemOrthonormalSequence.html</anchorfile>
      <anchor>a7271f228e2bd9664f86e4d78d9241da5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::FeasibilityConstraints</name>
    <filename>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</filename>
    <member kind="function">
      <type></type>
      <name>FeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>aa6097f5c77ded5e62786aafcb7bcaa10</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>aeebd28c6df3d399ea4b1a5b1ea5e6f4a</anchor>
      <arglist>(const FeasibilityConstraints &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>ac655eaf5fcaf88f22d2c110201896301</anchor>
      <arglist>(FeasibilityConstraints &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FeasibilityConstraints &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a9f7f1e28e873216116d3abc1e65125ad</anchor>
      <arglist>(const FeasibilityConstraints &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FeasibilityConstraints &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>ab50b8aee7f26e852464bb69db42c9706</anchor>
      <arglist>(FeasibilityConstraints &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a8efe7a6e513745484ac1d9eb1ab73ba0</anchor>
      <arglist>(const SeparatedFeasibilityConstraints &amp;cstr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wellFormed</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a8609d116a0075526211f4da8ba31b431</anchor>
      <arglist>(bool noEq=false) const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>C</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>aa78de30d6ec3a000eb05d167f6bfab61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>l</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>aa86ace66a2e1c3ca8e782a69de928a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>u</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a42500fdc5576c5ae6e2285c9f6c8b32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>xl</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>ad6185ad0b702ad0aa0d119d9b5b93c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>xu</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a9f43eedfaaa477b261fc399c1126d95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>transposedMat</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1FeasibilityConstraints.html</anchorfile>
      <anchor>a5f4550e5390170fa2407da710136eb2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::experimental::GoldfarbIdnaniSolver</name>
    <filename>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</filename>
    <base>jrl::qp::DualSolver</base>
    <class kind="struct">jrl::qp::experimental::GoldfarbIdnaniSolver::Problem</class>
    <member kind="function">
      <type></type>
      <name>GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ae825d7f0ce1a220cdb0aeed8df98ca32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a4b2dc0b50c24d15f9bd2e96f97f0aa27</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>afe49544908d6d947a0b6b8119181f540</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>TerminationStatus</type>
      <name>solve</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>adc8cc6d39496332b1ac1ca132810bb7a</anchor>
      <arglist>(MatrixRef G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, const std::vector&lt; ActivationStatus &gt; &amp;as={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::InitTermination</type>
      <name>init_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ac909689a54427bdc90ab63fc79cf746a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SelectedConstraint</type>
      <name>selectViolatedConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ae4b218c21358538f6c0d537e0055350c</anchor>
      <arglist>(const VectorConstRef &amp;x) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeStep_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a2a36e64743c67d9d4212874fcca7fefc</anchor>
      <arglist>(VectorRef z, VectorRef r, const internal::SelectedConstraint &amp;sc) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StepLength</type>
      <name>computeStepLength_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a058ee461278d3e183ab0e11132983175</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;x, const VectorConstRef &amp;u, const VectorConstRef &amp;z, const VectorConstRef &amp;r) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a7e4acd86253debf754de8c8b945d6575</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>aac6aa99da97e04447ad16d989631bca4</anchor>
      <arglist>(int l) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dot_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a9190592c0f1265667755de7b2326d065</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;z) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ac493cab8260a846f7a6abcbf54142dc0</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>processInitialActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ad59cc22f276aa36d0db0afc7525e9e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>initializeComputationData</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>afef8acec0b83061608e8a46a1de31182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual internal::TerminationType</type>
      <name>initializePrimalDualPoints</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>af3f31518c8afa7353e6412dbae02bf8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_d_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a26b710c860da17034a7c12b3f2b63cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_J_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>afb29add55b2e6b7626a2c64441ddea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_R_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ae4b4a53e3b594a4c70db62bd352fbbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_tmp_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a683d587fb97fbee70fb8ba73de4b905d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_hCoeffs_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a083aa05042891a1a4e8af9fb45eea06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_bact_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a26aa3a2afe4182de45d308c67775d55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Problem</type>
      <name>pb_</name>
      <anchorfile>classjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a5cc3e85ef061d1dc7dc2296ff8b09f6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::GoldfarbIdnaniSolver</name>
    <filename>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</filename>
    <base>jrl::qp::DualSolver</base>
    <class kind="struct">jrl::qp::GoldfarbIdnaniSolver::Problem</class>
    <member kind="function">
      <type></type>
      <name>GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ac1fdba1a92382cc2e7cebe38769719a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a9db2ca628b591d77426e1f5e8599db96</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GoldfarbIdnaniSolver</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a0b84a7d72b6ae5abaa176f55c3456403</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>TerminationStatus</type>
      <name>solve</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a95f9b9b2572a4b4cf4d77e07b35f838f</anchor>
      <arglist>(MatrixRef G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::InitTermination</type>
      <name>init_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a35b3b430bd78e338b15b69f12f6db56f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SelectedConstraint</type>
      <name>selectViolatedConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a0d6707d7cb9d3d75314f30e7a8130e49</anchor>
      <arglist>(const VectorConstRef &amp;x) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeStep_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ae264d405b14a29c934a9b97d8eb56e38</anchor>
      <arglist>(VectorRef z, VectorRef r, const internal::SelectedConstraint &amp;sc) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StepLength</type>
      <name>computeStepLength_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>aa0ad60b2a7814cbe6b1be041cf778888</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;x, const VectorConstRef &amp;u, const VectorConstRef &amp;z, const VectorConstRef &amp;r) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>abc0df95f057531189f1d20b79468c600</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeConstraint_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a4bf239a70d1ac5a703909663461edfc2</anchor>
      <arglist>(int l) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dot_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a7457ce5af79fb547fa9550e264cbe468</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc, const VectorConstRef &amp;z) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>ae83cdfd022dccd94939154b03c3ad5fc</anchor>
      <arglist>(int nbVar, int nbCstr, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initActiveSet</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a0b360071537172a8b4704a65909cc3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInitialConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>afc1ad095c4f5b8a2fcb0959584008143</anchor>
      <arglist>(const internal::SelectedConstraint &amp;sc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_d_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a8636bab2c2e903da46f103676540377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_J_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a04fedf966338973ebeae278da2a50493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::Workspace</type>
      <name>work_R_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>a08f0190c08088e39e04c4d3aec396a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Problem</type>
      <name>pb_</name>
      <anchorfile>classjrl_1_1qp_1_1GoldfarbIdnaniSolver.html</anchorfile>
      <anchor>aca6570e82f9917e4fc0f7e5a56b12059</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::internal::identity</name>
    <filename>structjrl_1_1qp_1_1internal_1_1identity.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structjrl_1_1qp_1_1internal_1_1identity.html</anchorfile>
      <anchor>ac6c08e92c5042fe8e33a118988cb45e4</anchor>
      <arglist>(T &amp;&amp;v) const noexcept -&gt; decltype(std::forward&lt; T &gt;(v))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::InitTermination</name>
    <filename>classjrl_1_1qp_1_1internal_1_1InitTermination.html</filename>
    <base>jrl::qp::internal::TerminationType</base>
    <member kind="function">
      <type></type>
      <name>InitTermination</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1InitTermination.html</anchorfile>
      <anchor>a9a175d4f996e6ef4207473703ebbc75c</anchor>
      <arglist>(const TerminationType &amp;tt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TerminationType</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1InitTermination.html</anchorfile>
      <anchor>a5d3846c81d71bfcab552f0734603a512</anchor>
      <arglist>(TerminationStatus status)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::internal::is_base</name>
    <filename>structjrl_1_1qp_1_1internal_1_1is__base.html</filename>
    <templarg>Base</templarg>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>check</name>
      <anchorfile>structjrl_1_1qp_1_1internal_1_1is__base.html</anchorfile>
      <anchor>a650237e408addfbbb6b62c2026472659</anchor>
      <arglist>(Base&lt; T... &gt; const volatile &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>check</name>
      <anchorfile>structjrl_1_1qp_1_1internal_1_1is__base.html</anchorfile>
      <anchor>aa55d9756fc0b0791eb9ceb1b058f5d0b</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::RandomLeastSquare::KKT</name>
    <filename>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</filename>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>dL</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>af16773540843c365abc59885f49ebe7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>eqViol</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>ac46e917db97a9de86f0349a63ec5d163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>ineqViol</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>a46f9c66570388c1e9a046a017221faf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>bndViol</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>acbac774b8b3a491ebd0f85da4a7b3da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>ineqCompl</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>a16297b4152d6f55f818233365088927a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>bndCompl</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare_1_1KKT.html</anchorfile>
      <anchor>a03bfc28d6ab34ec75815d855a97411be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::LeastSquareProblem</name>
    <filename>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</filename>
    <templarg>Separated</templarg>
    <member kind="typedef">
      <type>std::conditional_t&lt; Separated, SeparatedFeasibilityConstraints, FeasibilityConstraints &gt;</type>
      <name>Base</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a5057f1500c7471e79b462db5cd7564c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wellFormed</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a4b755e9e44658ebf758ac670b8ca2469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>A</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a692ac70f8d9eadc88af47b1863ee1c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>b</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a4eac304119b215097fcf82872f2dfe28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LeastSquareProblem&lt; true &gt;</name>
    <filename>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</filename>
    <member kind="typedef">
      <type>std::conditional_t&lt; Separated, SeparatedFeasibilityConstraints, FeasibilityConstraints &gt;</type>
      <name>Base</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a5057f1500c7471e79b462db5cd7564c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wellFormed</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a4b755e9e44658ebf758ac670b8ca2469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>A</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a692ac70f8d9eadc88af47b1863ee1c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>b</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1LeastSquareProblem.html</anchorfile>
      <anchor>a4eac304119b215097fcf82872f2dfe28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::utils::Logger</name>
    <filename>classjrl_1_1qp_1_1utils_1_1Logger.html</filename>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>a131ca23640c6cfaa7d0bf0ed92640289</anchor>
      <arglist>(std::ostream &amp;os, std::string name, std::uint32_t flags=0)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>setFlag</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>a7b5b432e0148b144072736b8b35999a4</anchor>
      <arglist>(std::uint32_t flag, bool add=true)</arglist>
    </member>
    <member kind="function">
      <type>Logger &amp;</type>
      <name>setOutputStream</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>a57176643a3ea5ebf1840535415b3e70f</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comment</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>a6266e1b170e4ce822652d68cf53b9c11</anchor>
      <arglist>(std::uint32_t flag, Args &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startIter</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>a6ddd2d13ff8ac8e2d24ee5ce5a357378</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>abca4b7a185d6b77d165949c347fcd908</anchor>
      <arglist>(std::uint32_t flag, Args &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>Logger</type>
      <name>subLog</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>ac95578968584d7a0a2cea44ce3c68d38</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iter</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1Logger.html</anchorfile>
      <anchor>ae12b6eaae184a3615753667743582395</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::internal::NotConst</name>
    <filename>structjrl_1_1qp_1_1internal_1_1NotConst.html</filename>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::OrthonormalSequence</name>
    <filename>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</filename>
    <member kind="function">
      <type></type>
      <name>OrthonormalSequence</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>aedcee81901447ef302e7ede1e7a3ed2f</anchor>
      <arglist>(int n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a7177699056e87f6a6d033c4aa958ea6a</anchor>
      <arglist>(int start, const Givens &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a1b43edf26783b4209ea3e74da705c58f</anchor>
      <arglist>(int start, const VectorConstRef &amp;essential, double tau)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepare</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a7fd868b9a24b0c91eea58f59ca420f39</anchor>
      <arglist>(OSeqType type, int n, int seqSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a5510ee4eca3a3e59b4446495b8862b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a96e185985c2454e3abf9a7a838010d1d</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a39b5da2b12c59042eaf36e0451a35bd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a411e2db280e09b75c867b561a76ac8a7</anchor>
      <arglist>(VectorRef v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransposeToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a5db03c87dfbcb14584af0f5028868d68</anchor>
      <arglist>(VectorRef v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a4cca74381bd0c0fd8d98fe0c6ca851b0</anchor>
      <arglist>(VectorRef v, const SingleNZSegmentVector &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTransposeToTheLeft</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1OrthonormalSequence.html</anchorfile>
      <anchor>a010b8f9a0e598bab7675b64a80e0871d</anchor>
      <arglist>(VectorRef out, const SingleNZSegmentVector &amp;in) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::PartitionnedQ</name>
    <filename>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</filename>
    <member kind="function">
      <type></type>
      <name>PartitionnedQ</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>aeb6e93da85d1e51326dec7f3d2b893d7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartitionnedQ</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>adc2f2beb21b6ed1eb604a966824d8be8</anchor>
      <arglist>(const OrthonormalSequence &amp;Q, const int &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>const OrthonormalSequence &amp;</type>
      <name>Q</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>a3f8d7faa0742fb5062af68d891ac76a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>m1</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>a8c85391e172dcd93bae5a560584b1c5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>m2</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>ad4f53a7289cb653667b63798f6a9885f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1PartitionnedQ.html</anchorfile>
      <anchor>a9a0cc2c463355586ed446491816360ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::experimental::BlockGISolver::Problem</name>
    <filename>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</filename>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a5090a91c534789901c6d8a3948f69ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Problem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a8baf281175ccf78589de827230cdd1ea</anchor>
      <arglist>(const Problem &amp;)=delete</arglist>
    </member>
    <member kind="variable">
      <type>structured::StructuredG</type>
      <name>G</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a9faca1e484ee7ff05d40bbad73c57142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>a</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a4e8625eefb885f985aeec827e918102e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>structured::StructuredC</type>
      <name>C</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a281dec691a5a8f726ca3dd809d6d08bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bl</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>adbd9fc71d11296869cf756a05a81ad77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bu</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a903edd4f10bbde2f9e0fe75aba68213e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xl</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a4f11302ed30c2fceed2d1fde3663bd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xu</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>a6e9dd76412ae26b9badd7bb5eaee2c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ActivationStatus &gt;</type>
      <name>as</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1BlockGISolver_1_1Problem.html</anchorfile>
      <anchor>aa4ee3e9bcfffa169f410db1abbb06bbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::experimental::GoldfarbIdnaniSolver::Problem</name>
    <filename>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</filename>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a37c8b68f98f4a4252217e077c10038a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Problem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a20fbea5b48685f3ad5e904bf091b035b</anchor>
      <arglist>(const Problem &amp;)=delete</arglist>
    </member>
    <member kind="variable">
      <type>MatrixRef</type>
      <name>G</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>aec7bcf8de16b1f04b1579afa7d8691f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>a</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a6bec7edcb49dcaf02b07b089411e048f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixConstRef</type>
      <name>C</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a4de01d9b1204b27de322e513930dd8c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bl</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a3612100d11ad7161474f5097033e1ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bu</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a20e49e8ca3c992a40ccee2439ed19c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xl</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a417260277677e840377ca8d46b74f6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xu</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a2142d545409765c859afe65e8b930f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ActivationStatus &gt;</type>
      <name>as</name>
      <anchorfile>structjrl_1_1qp_1_1experimental_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a41fafcf9acbc4bdd88255d200e0ac105</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::GoldfarbIdnaniSolver::Problem</name>
    <filename>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</filename>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>aed46f99e13b25911bc04af6fa5da4768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Problem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a0b48055fd080c42c5c8c111bf04cbcd9</anchor>
      <arglist>(const Problem &amp;)=delete</arglist>
    </member>
    <member kind="variable">
      <type>MatrixRef</type>
      <name>G</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a450c487458c0f23bc9666b68c2980fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>a</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>ae62dafac52da475d3f725be786fa28a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixConstRef</type>
      <name>C</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>ad32ed673325361820ae0921688c12eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bl</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a4a90fb4bb4570ed90549c65986cb9e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>bu</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a355c8f1bf3a95a9817ebbb2767e1cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xl</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a40ba79029181cf9f1e9b763ca445627f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorConstRef</type>
      <name>xu</name>
      <anchorfile>structjrl_1_1qp_1_1GoldfarbIdnaniSolver_1_1Problem.html</anchorfile>
      <anchor>a8e53da99f1b731e5feaf2f0bf5b0f335</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::ProblemCharacteristics</name>
    <filename>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</filename>
    <member kind="function">
      <type></type>
      <name>ProblemCharacteristics</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a5a4711849a7712a9b9b7e05cd2c55ee7</anchor>
      <arglist>(int nVar, int nObj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProblemCharacteristics</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a99ef46c9ab3e820d543c20e52f9a809f</anchor>
      <arglist>(int nVar, int nObj, int nEq, int nIneq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProblemCharacteristics</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>ab4e200ce561519b1021c451c57abe9ea</anchor>
      <arglist>(int nVar, int nObj, int nEq, int nIneq, int rankObj, int nSharedRank, int nStrongActIneq, int nWeakActIneq, int nStrongActBounds, int nWeakActBounds, int bounds, bool doubleSidedIneq, bool strictlyFeasible)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nEq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a9591d56e1f896bb0567de2dc7cfadc0f</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>aa16bfafdf72d51075af117010372374d</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>rankObj</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a36527f83c7cc8ecca429d0b57b83ac0b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nSharedRank</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a63d727f6181639dd658a5e561967d3b5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nStrongActIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a052e1ea0985ba66389f49911d13b59a8</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nWeakActIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>aafbfd1ee6277de257d9c70d26c388180</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nStrongActBounds</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>adbb4fdfcd5f29a61c717f977e2677d53</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>nWeakActBounds</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a4c79988746c223b2a4bfeddef84437e5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>bounds</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a8f66db6215f1c7d6a80bcb2bf0499af8</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>doubleSidedIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>ab29b0a3f034c324632b14f08ad0db39c</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>ProblemCharacteristics &amp;</type>
      <name>strictlyFeasible</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a18e3ebf3afe5fd2802a94f712561d778</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>ac7eda56bb09033a66d1a59559137df17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nVar_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a4c128f9eb0af7e213512943d454bf978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nObj_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a0c87bbfdc302f6cacbaf92a61026d718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nEq_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a7df8774443e166ddc8fb4374494a3f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nIneq_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>ad0dcb6170813623f5d6d0d6011c2c627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rankObj_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a4031ba0c977ec5680a63fb1de4796298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nSharedRank_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a2dc10b06e1ab0b787438bbf264ec4673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nStrongActIneq_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>affc20536a9f1e3e5f9a09483ba93f823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nWeakActIneq_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>aef14a4d9d9b25a88d5e45029469d3658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nStrongActBounds_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a4a0c0ac7e904fe5f18204ebf9896b4b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nWeakActBounds_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a01c5c74c856d99055deaa1c777c980a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bounds_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a7114e3f97ceb95fd48948e618d89bb5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doubleSidedIneq_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a9671e1db9eb6aa00d7ac65c3a4deee03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strictlyFeasible_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1ProblemCharacteristics.html</anchorfile>
      <anchor>a1381c1959e23597707c8c30a6735e7b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::QPProblem</name>
    <filename>structjrl_1_1qp_1_1test_1_1QPProblem.html</filename>
    <templarg>Separated</templarg>
    <member kind="typedef">
      <type>std::conditional_t&lt; Separated, SeparatedFeasibilityConstraints, FeasibilityConstraints &gt;</type>
      <name>Base</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>ade3ece393ee27228af567b7e2261456e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPProblem</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>ad11e1484484f858df36dc3698e6f9f6e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPProblem</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>ab5ee4c1b596752c74f55dba85998e1b7</anchor>
      <arglist>(const QPProblem &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPProblem</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a3f63984ddc8f157b43359c1ece8fa9d5</anchor>
      <arglist>(QPProblem &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>QPProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a25f4433c56b8483fdeed91f98ed6e484</anchor>
      <arglist>(const QPProblem &amp;qp)=default</arglist>
    </member>
    <member kind="function">
      <type>QPProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>aeaa95db7b0f8c7e6bbdc31d6af96e427</anchor>
      <arglist>(QPProblem &amp;&amp;qp)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPProblem</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a4396b60601deba67eab02c6a2de4705a</anchor>
      <arglist>(const QPProblem&lt;!Separated &gt; &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPProblem</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a095aedc9af89309fc448d7f4b01487f8</anchor>
      <arglist>(const LeastSquareProblem&lt; LSSeparated &gt; &amp;ls)</arglist>
    </member>
    <member kind="function">
      <type>QPProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a82f062b0712e0dec29d9219872e8c6f9</anchor>
      <arglist>(const LeastSquareProblem&lt; LSSeparated &gt; &amp;ls)</arglist>
    </member>
    <member kind="function">
      <type>QPProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>afd1200e65e3a9be5c86c8bb10e784fab</anchor>
      <arglist>(const QPProblem&lt;!Separated &gt; &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wellFormed</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a85566d806e6f564b28391b5488e23914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QPProblem&lt; Separated &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>af7afaa62d7f9bdb33f5d37274177fa35</anchor>
      <arglist>(const LeastSquareProblem&lt; LSSeparated &gt; &amp;ls)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>G</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a894f65e4ca02d1deb11728dd3f1ee353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>a</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a76d2d56f3bcfe6675238b18e862d43c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>objCst</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1QPProblem.html</anchorfile>
      <anchor>a9b58026d7deb028e020876909590d69e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::RandomLeastSquare</name>
    <filename>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</filename>
    <base>LeastSquareProblem&lt; true &gt;</base>
    <class kind="struct">jrl::qp::test::RandomLeastSquare::KKT</class>
    <member kind="function">
      <type>KKT</type>
      <name>computeKKTValues</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>af0d85ea2f4a9390790dcbdb637a68269</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkKKT</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a7ea91a5f74148a4bbee2dbc897d04b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testKKT</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a64f68db12d35e9c7c10605718295a1a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dispKKT</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>ae62cde37caefffa4c7c19f5fca3fffa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disp</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>aab56242615ba7fb12e15a41117ca8058</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>x</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a1379547dd427875b43b16ace0943a38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>lambdaEq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a27a9b3b9223e671a9999f4a6f14c60c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>lambdaIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a65bf735eaefb9bbd761d0b80d81b55f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>lambdaBnd</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a75c1cf8853fc73575783d67379309477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doubleSidedIneq</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a4947b5e8e01c06c1fbb441f0a0c7e027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bounds</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1RandomLeastSquare.html</anchorfile>
      <anchor>a276bf4fdbafa9b727148e2b66e40b4fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::scalar_normal_random_op</name>
    <filename>structjrl_1_1qp_1_1test_1_1scalar__normal__random__op.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>scalar_normal_random_op</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1scalar__normal__random__op.html</anchorfile>
      <anchor>aeeb1923e0e5f6e4bbf1a39c9b497871d</anchor>
      <arglist>(double mean=0, double stddev=1)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar</type>
      <name>operator()</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1scalar__normal__random__op.html</anchorfile>
      <anchor>a9da8849cb4ba93b3f60b48840dfe06c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::normal_distribution&lt; Scalar &gt;</type>
      <name>d_</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1scalar__normal__random__op.html</anchorfile>
      <anchor>a5c7d841d43559964a61dbcb20da2eb47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::SelectedConstraint</name>
    <filename>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>SelectedConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</anchorfile>
      <anchor>a05722d338553576b881ae49e49fb39bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectedConstraint</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</anchorfile>
      <anchor>ad4e4a77c9f6fe81f1004f9003824d8fd</anchor>
      <arglist>(int p, ActivationStatus status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</anchorfile>
      <anchor>a0c9d8a8683fdfed9f3c3e2714c5b14e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActivationStatus</type>
      <name>status</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</anchorfile>
      <anchor>a892cd5bf3cdb4f5af57a437f9c14defc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SelectedConstraint.html</anchorfile>
      <anchor>a3768ec80a12e5b13df497abc5da5f907</anchor>
      <arglist>(std::ostream &amp;os, const SelectedConstraint &amp;sc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::test::SeparatedFeasibilityConstraints</name>
    <filename>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</filename>
    <base>jrl::qp::test::FeasibilityConstraints</base>
    <member kind="function">
      <type></type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>af40d25d6b091e76df5b6128a8e08db3d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>acaf91886a8c91a1f152c726df318ee82</anchor>
      <arglist>(const SeparatedFeasibilityConstraints &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>a0aea59b72e08543e71c1ddb36b7c7ded</anchor>
      <arglist>(SeparatedFeasibilityConstraints &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>SeparatedFeasibilityConstraints &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>a6d9efbd27bfc9c7a84c32a4d91f01088</anchor>
      <arglist>(const SeparatedFeasibilityConstraints &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>SeparatedFeasibilityConstraints &amp;</type>
      <name>operator=</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>a048ce518223b51e91b22d732d709dd71</anchor>
      <arglist>(SeparatedFeasibilityConstraints &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>a3d074eec49cb8771c921c40a93fcc244</anchor>
      <arglist>(const FeasibilityConstraints &amp;feas)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wellFormed</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>ad44c54e3b93de908afd49f5518bfd700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>E</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>a1c005a9708b660fdd9f0919a40465287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>f</name>
      <anchorfile>structjrl_1_1qp_1_1test_1_1SeparatedFeasibilityConstraints.html</anchorfile>
      <anchor>af3f43a0f312ea19347f6aa62ffe416f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::SingleNZSegmentVector</name>
    <filename>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</filename>
    <member kind="function">
      <type></type>
      <name>SingleNZSegmentVector</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>acedb7a3f267d3adc9a132c066b5414e7</anchor>
      <arglist>(const VectorConstRef &amp;v, int start, int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>a0a9cd304e749783742eff6a3d67f9b25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>end</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>aadaeac6703be152e05ee800063260b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>adbbe1207460a8aec0cd7f16c10f28626</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorConstRef &amp;</type>
      <name>nzSegment</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>ae280dbeee246ab2d697d07ae3ee0975e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toFullVector</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>a904df3383ec6f7fa9ba1d73e3232f7d5</anchor>
      <arglist>(VectorRef u) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1SingleNZSegmentVector.html</anchorfile>
      <anchor>ad600ef27d5e3f7eddd87d635ade10b54</anchor>
      <arglist>(const VectorConstRef &amp;u) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::SolverOptions</name>
    <filename>structjrl_1_1qp_1_1SolverOptions.html</filename>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>logFlags</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a7c3ab3b3fa305aca354d5f382d5276cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>logFlags</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a8ad4d28d52b2af08db2e54d78554af5d</anchor>
      <arglist>(LogFlags f)</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>logFlags</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a33ddf731ecbe96a05a87a755ddb67844</anchor>
      <arglist>(std::uint32_t f)</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>addLogFlag</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>ac0bcf8b90ab2e7a592f73560e48422a8</anchor>
      <arglist>(LogFlags f)</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>removeLogFlag</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>acb3faaee22420e96fd608660bb12e3bf</anchor>
      <arglist>(LogFlags f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIter</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a52cedd1d9b19dcbcd2d5f479a0307229</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>maxIter</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a8cb10bb1bb84b14ee5c406d0746f0535</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bigBnd</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>aaf2c08da50da6c00f1fef0e061b21269</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>bigBnd</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a28e05cd61e6c6f51edb12bc5148f040e</anchor>
      <arglist>(double big)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>warmStart</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a5dec01e3edc9c4df93f9d39f0093ef61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>warmStart</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a66dddd6e80dd8e3981f7f760e200a090</anchor>
      <arglist>(bool warm)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>logStream</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>abeeb665e478aea410f5e695bf33d414d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolverOptions &amp;</type>
      <name>logStream</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>ad6375b64d78a681f34728937f8650465</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxIter_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>ad64109a147a5e039b3c1ba58f0fbe0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bigBnd_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>aaf65597aba4934ea7a53284125265477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>warmStart_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a27854976d075dfdfaa81f2d208d016d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>logFlags_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>ac5036778dccaa978e7d4be286defc7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>logStream_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>a30ba9cf74a8947f53949fa331b86c5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::ostream &amp;</type>
      <name>defaultStream_</name>
      <anchorfile>structjrl_1_1qp_1_1SolverOptions.html</anchorfile>
      <anchor>add3e7c3ff70630488c04d7613c4a3263</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::DualSolver::StepLength</name>
    <filename>structjrl_1_1qp_1_1DualSolver_1_1StepLength.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>t1</name>
      <anchorfile>structjrl_1_1qp_1_1DualSolver_1_1StepLength.html</anchorfile>
      <anchor>a98181d047754a6e13961e82d6210c0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>t2</name>
      <anchorfile>structjrl_1_1qp_1_1DualSolver_1_1StepLength.html</anchorfile>
      <anchor>a9195832dcff5409e71957277fe0ab139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>l</name>
      <anchorfile>structjrl_1_1qp_1_1DualSolver_1_1StepLength.html</anchorfile>
      <anchor>a8f299cd03c77b128ee53b01fc38b8723</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::structured::StructuredC</name>
    <filename>classjrl_1_1qp_1_1structured_1_1StructuredC.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a36b9bbce9b2655b86bbca6a53da27114</anchor>
      <arglist></arglist>
      <enumvalue file="classjrl_1_1qp_1_1structured_1_1StructuredC.html" anchor="a36b9bbce9b2655b86bbca6a53da27114a9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>StructuredC</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>acbee76f8eb8d69ca56c8dcf149e9fc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructuredC</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>aa808c2911035b1c47cbe78ef8a647a75</anchor>
      <arglist>(std::vector&lt; MatrixConstRef &gt; C)</arglist>
    </member>
    <member kind="function">
      <type>StructuredC &amp;</type>
      <name>operator=</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>aff916e750a90bbc450de69ef6d846aea</anchor>
      <arglist>(const StructuredC &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixConstRef &amp;</type>
      <name>diag</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>aab0604470b83ac56de67d2d9a731b642</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbVar</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>afa4486bee5d2657a96fec979d21c45b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbVar</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a5048993acd504e63a84babe6b2d20752</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbCstr</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a0b07d9d4192e24c6ae7c457d56bd2530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbCstr</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a97a9e47a17df471d0e4b0847f6cc6fac</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>internal::SingleNZSegmentVector</type>
      <name>col</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>aa5008e17efe133f99f679225cd79ddc5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMult</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a796f85ce709510014eaa6b7b476b00ab</anchor>
      <arglist>(VectorRef out, const VectorConstRef &amp;in) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredC.html</anchorfile>
      <anchor>a5fea4c166a21cd183a1a68ef10bfd240</anchor>
      <arglist>(std::ostream &amp;os, const StructuredC &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::structured::StructuredG</name>
    <filename>classjrl_1_1qp_1_1structured_1_1StructuredG.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>aa44fc2e844ab04277211eb87b6a6f71a</anchor>
      <arglist></arglist>
      <enumvalue file="classjrl_1_1qp_1_1structured_1_1StructuredG.html" anchor="aa44fc2e844ab04277211eb87b6a6f71aa5703e9c5e91f1422d8cc46c4da1b4121">TriBlockDiagonal</enumvalue>
      <enumvalue file="classjrl_1_1qp_1_1structured_1_1StructuredG.html" anchor="aa44fc2e844ab04277211eb87b6a6f71aafe2f8601f22f1978fa215a3dc8c9fa73">BlockArrowUp</enumvalue>
      <enumvalue file="classjrl_1_1qp_1_1structured_1_1StructuredG.html" anchor="aa44fc2e844ab04277211eb87b6a6f71aa002c3dc5e4c51602047adb24dddbc119">BlockArrowDown</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>StructuredG</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>acdfd560d391ea94a19cbd4e9780cd3cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructuredG</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a1a3d1205e5a034465034e59c93ee06f3</anchor>
      <arglist>(Type t, const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;offDiag)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a7a65b959af98570a8ac0eb66a799c8f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixRef &amp;</type>
      <name>diag</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a212c91bd7478db5604f1f1f62a050ffc</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixRef &amp;</type>
      <name>offDiag</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a54846e1054a4215796634977b55c7f23</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbVar</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a820c143386bab6d2d9bc8af32ae248ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nbVar</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a5534c80ffe30e08f92f7dfbc79f9d9b0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lltInPlace</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>aa76a36461cb547bc16ca75c66de8128d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decomposed</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a3a71ce0708e089ff83532b4bd216321e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlaceLTranspose</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a947c7da651c57ad4ced3b538e14f9cd8</anchor>
      <arglist>(VectorRef v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveL</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a8561815dc743082734e55feb5f997fc8</anchor>
      <arglist>(VectorRef out, const VectorConstRef &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveL</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>ab617d132535b4788c81770b818a5a36a</anchor>
      <arglist>(VectorRef out, const internal::SingleNZSegmentVector &amp;in) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredG.html</anchorfile>
      <anchor>a24dea4b99238cee9b26153df9018d496</anchor>
      <arglist>(std::ostream &amp;os, const StructuredG &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::structured::StructuredJ</name>
    <filename>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</filename>
    <member kind="function">
      <type></type>
      <name>StructuredJ</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>aa58c53fefde94f8982b2e45bd5146b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setL</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>a61b8b8196e80c885e04fd1f8c5c20aac</anchor>
      <arglist>(const StructuredG &amp;decomposedG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>aade0892b147f28d6f6e25a28582d292e</anchor>
      <arglist>(const internal::PartitionnedQ &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>a78700f9caf7481f43407bfacf597f470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>a8200ea0a6b454d8c0f7b64c0278f402d</anchor>
      <arglist>(int nbVar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>premultByJ2</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>a9e6e7cebf05a762bc28108912b7cd454</anchor>
      <arglist>(VectorRef out, const VectorConstRef &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>premultByJt</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredJ.html</anchorfile>
      <anchor>ad81d21ac7d083600651a3a4ac879f336</anchor>
      <arglist>(VectorRef out, const StructuredC &amp;C, const internal::SelectedConstraint &amp;sc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::structured::StructuredQR</name>
    <filename>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</filename>
    <member kind="function">
      <type></type>
      <name>StructuredQR</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>ac0771e90ad1ec9c292122398ee0667b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setL</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>ad75ce82a154bbc2b8d1fc0035f3f63ef</anchor>
      <arglist>(const StructuredG &amp;decomposedG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>ad48335b60a69c99a064189b288c6d7a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>a503bade24991b50e51c6ac7beb39d9f0</anchor>
      <arglist>(int nbVar)</arglist>
    </member>
    <member kind="function">
      <type>internal::PartitionnedQ</type>
      <name>getPartitionnedQ</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>a4f45de5e865df88aab6e496768dcf417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRToZero</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>a19fb0ceb6347ab331a2292ff7073b747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RSolve</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>a445fd8df1419cb731d2932fba18bc1f3</anchor>
      <arglist>(VectorRef out, const VectorConstRef &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>a6d2b5c494f9d1f6530372e7274b1de7e</anchor>
      <arglist>(const VectorConstRef &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classjrl_1_1qp_1_1structured_1_1StructuredQR.html</anchorfile>
      <anchor>ac6f0dcb644c73bbb4cd6709d97b33d65</anchor>
      <arglist>(int l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::TerminationType</name>
    <filename>classjrl_1_1qp_1_1internal_1_1TerminationType.html</filename>
    <member kind="function">
      <type></type>
      <name>TerminationType</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1TerminationType.html</anchorfile>
      <anchor>a5d3846c81d71bfcab552f0734603a512</anchor>
      <arglist>(TerminationStatus status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1TerminationType.html</anchorfile>
      <anchor>a4ef0036c4265590cfb85c82ea03bf739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TerminationStatus</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1TerminationType.html</anchorfile>
      <anchor>a6839c11247713fb64a6fc369d3cded82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TerminationStatus</type>
      <name>status</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1TerminationType.html</anchorfile>
      <anchor>a7d713b5f9493168bf21fe1af3641c887</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jrl::qp::internal::to_underlying_type</name>
    <filename>structjrl_1_1qp_1_1internal_1_1to__underlying__type.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structjrl_1_1qp_1_1internal_1_1to__underlying__type.html</anchorfile>
      <anchor>a22954c67e7ffd2a3a68a66faf2dd5fd3</anchor>
      <arglist>(const T &amp;v) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::utils::toMatlab</name>
    <filename>classjrl_1_1qp_1_1utils_1_1toMatlab.html</filename>
    <member kind="function">
      <type></type>
      <name>toMatlab</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1toMatlab.html</anchorfile>
      <anchor>ac18317edc919b02a2a9373eca63ed656</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toMatlab</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1toMatlab.html</anchorfile>
      <anchor>a4af0187bdd18343e89b8fdf0a45ed3ee</anchor>
      <arglist>(const Eigen::EigenBase&lt; Derived &gt; &amp;M)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classjrl_1_1qp_1_1utils_1_1toMatlab.html</anchorfile>
      <anchor>a2de2edeae64785dfca1ae0fdb9e4e21c</anchor>
      <arglist>(std::ostream &amp;, const toMatlab &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>jrl::qp::internal::Workspace</name>
    <filename>classjrl_1_1qp_1_1internal_1_1Workspace.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Workspace</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a1dc5b97b6f75afe45199abe853e3788f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Workspace</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>adf3c82f96e148388448839c08eb88072</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Workspace</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a0c24af34ac0ca68d09ed49c00675bb75</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>adfac3b037f18384ad9a1e9bbd5b87b45</anchor>
      <arglist>(int size, bool fit=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a38a287fcc7e2701c80d1e8e0636a429c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>ae3f6a668aa70c6d5c6996ec28b2666d4</anchor>
      <arglist>(int rows, int cols, bool fit=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeLd</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a881921de56482098876bcb232dc555ff</anchor>
      <arglist>(int rows, int cols, int oldLd, int newLd)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asVector</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a989a37e09fdba92cf9e26fedfb9a4f8e</anchor>
      <arglist>(int size, NotConst={})</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asVector</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a26fe8209ac6129a331d2be1daa2022e4</anchor>
      <arglist>(int size) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asMatrix</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a343bb679ffcdd8fd44109e6a6ea51a47</anchor>
      <arglist>(int rows, int cols, int ld, NotConst={})</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asMatrix</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a597de9e6943d16a4b5d7c09934429a24</anchor>
      <arglist>(int rows, int cols, int ld) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classjrl_1_1qp_1_1internal_1_1Workspace.html</anchorfile>
      <anchor>a102fcdca4d6b2d76dd224253647c1ac1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl</name>
    <filename>namespacejrl.html</filename>
    <namespace>jrl::qp</namespace>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp</name>
    <filename>namespacejrl_1_1qp.html</filename>
    <namespace>jrl::qp::constant</namespace>
    <namespace>jrl::qp::decomposition</namespace>
    <namespace>jrl::qp::experimental</namespace>
    <namespace>jrl::qp::internal</namespace>
    <namespace>jrl::qp::structured</namespace>
    <namespace>jrl::qp::test</namespace>
    <namespace>jrl::qp::utils</namespace>
    <class kind="class">jrl::qp::DualSolver</class>
    <class kind="class">jrl::qp::GoldfarbIdnaniSolver</class>
    <class kind="struct">jrl::qp::SolverOptions</class>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
      <name>MatrixConstRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a36932925bb0032413d85027bcfb42dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8220344a91c3dcd12dc60b751427cdc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>VectorConstRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a61011419a1f4de75f658df1d17ceaae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a91278fdbb65099f6051406727c2e28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiRotation&lt; double &gt;</type>
      <name>Givens</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a7f003bb597f0e6405c23ec9f3c718670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(internal::Workspace&lt; double &gt;().asVector(0))</type>
      <name>WVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a12f43caa2519ab8cc2e0a04d42f61422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::add_const_t&lt; internal::Workspace&lt; double &gt; &gt;().asVector(0))</type>
      <name>WConstVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a961f733f98e4cdf72a086084d9ca0777</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ActivationStatus</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8200417432fa485fd7e8cc8ef1d1ff49</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a6b273343c454f9c53dcfc9c4ccf171d2">INACTIVE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49aa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a9e43f5291e6fcb2ad99c8e3f91acd179">UPPER</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49a75fe593b97fa52826f3dd3eb2b92ff57">LOWER_BOUND</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49ad21999f32561a206952276ffc08b975a">UPPER_BOUND</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a8200417432fa485fd7e8cc8ef1d1ff49ac6e6dc18b53b4c2681394b9d8aefcec7">FIXED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminationStatus</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a2be96344dd3712e23a7eabc0d530062c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cad0749aaba8b833466dfcbb0428e4f89c">SUCCESS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cac978501e064fa33613b35d570d5401ee">INCONSISTENT_INPUT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062cae88b32132c55177d5b27f4cf74e0de9d">NON_POS_HESSIAN</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca6faaca695f728b47f47dd389f31e4a93">INFEASIBLE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca166fdb12611b864605b50bcb6ef3c185">MAX_ITER_REACHED</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca5faf851f584c5d83788f2de723637cdc">LINEAR_DEPENDENCY_DETECTED</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca0d4ade66ad6c3f9caf79f8d75b63d75b">OVERCONSTRAINED_PROBLEM</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="a2be96344dd3712e23a7eabc0d530062ca696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogFlags</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>ad24df199de1a6f61275d4c96107b5dc3</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aa84cc046d48610b05c21fd3670d0c829">INPUT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a81bc75c5e7d582c92dbec339e8d89f57">TERMINATION</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aac46279efe855c20a7388a9f1a12a465">ITERATION_BASIC_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3afac1d6b38b3d6531966bceaec0983095">ITERATION_ADVANCE_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a6a3ca91cf2d0158ff4a3a3bf791c9f38">ACTIVE_SET</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a84033091af4b588002199e5ed322ba6c">ACTIVE_SET_DETAILS</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3afaee4ca3c30ee18148ce3ada37466498">INIT</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3aca5c504c6136e20051be115160b0f0b8">MISC</enumvalue>
      <enumvalue file="namespacejrl_1_1qp.html" anchor="ad24df199de1a6f61275d4c96107b5dc3a00749b615db836bc0f8fd5f087b2595a">NO_ITER</enumvalue>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a0b320d90746e7f8f70af2401da58984a</anchor>
      <arglist>(LogFlags a, LogFlags b)</arglist>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a1f57527a338b6e6ea3a7523f009cccc9</anchor>
      <arglist>(std::uint32_t a, LogFlags b)</arglist>
    </member>
    <member kind="function">
      <type>std::uint32_t</type>
      <name>operator|</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a399b02389bd6d5e70dd6d9f1b8e8c53d</anchor>
      <arglist>(LogFlags a, std::uint32_t b)</arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::MatrixXd</type>
      <name>EmptyMatrix</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a8d28e800dd5e8096dea07de068ea84d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::VectorXd</type>
      <name>EmptyVector</name>
      <anchorfile>namespacejrl_1_1qp.html</anchorfile>
      <anchor>a5b58525ffcacb25ca5eca45e9ec4d5e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::constant</name>
    <filename>namespacejrl_1_1qp_1_1constant.html</filename>
    <member kind="variable">
      <type>constexpr std::uint32_t</type>
      <name>noIterationFlag</name>
      <anchorfile>namespacejrl_1_1qp_1_1constant.html</anchorfile>
      <anchor>a3cb37c8a08b9ed1b966bd02f96dbafa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::decomposition</name>
    <filename>namespacejrl_1_1qp_1_1decomposition.html</filename>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>blockArrowLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a2f65392b0bcd4dabf6cf997d6d8898a3</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up=false)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a944556805b9fcec753b8a7622c5e796e</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>blockArrowLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ada4d609948373c6e0a7ecad04787dafb</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, bool up, MatrixRef M, int start=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI bool</type>
      <name>triBlockDiagLLT</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab12e8c947e5c397e5e5384ed017369b5</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a9a9937ec7cc2b641254c81d004cf7ee8</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int start=0)</arglist>
    </member>
    <member kind="function">
      <type>JRLQP_DLLAPI void</type>
      <name>triBlockDiagLTransposeSolve</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ab817f90e5d71975926a9a2e8c2c43ffd</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;subDiag, MatrixRef M, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blockArrowLLT_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>a642f87ad7947600ff28ad25113c20219</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockArrowLSolve_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>aeb2c2953ca0f7fb5170758f574b92a7f</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, MatrixRef M, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockArrowLTransposeSolve_</name>
      <anchorfile>namespacejrl_1_1qp_1_1decomposition.html</anchorfile>
      <anchor>ae88cb7056884a3725d6efeef2a53202f</anchor>
      <arglist>(const std::vector&lt; MatrixRef &gt; &amp;diag, const std::vector&lt; MatrixRef &gt; &amp;side, MatrixRef M, int start, int end)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::experimental</name>
    <filename>namespacejrl_1_1qp_1_1experimental.html</filename>
    <class kind="class">jrl::qp::experimental::BlockGISolver</class>
    <class kind="class">jrl::qp::experimental::BoxAndSingleConstraintSolver</class>
    <class kind="class">jrl::qp::experimental::GoldfarbIdnaniSolver</class>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::internal</name>
    <filename>namespacejrl_1_1qp_1_1internal.html</filename>
    <class kind="class">jrl::qp::internal::ActiveSet</class>
    <class kind="class">jrl::qp::internal::ConstraintNormal</class>
    <class kind="struct">jrl::qp::internal::is_base</class>
    <class kind="class">jrl::qp::internal::always_true</class>
    <class kind="class">jrl::qp::internal::always_false</class>
    <class kind="struct">jrl::qp::internal::identity</class>
    <class kind="struct">jrl::qp::internal::to_underlying_type</class>
    <class kind="class">jrl::qp::internal::ElemOrthonormalSequence</class>
    <class kind="class">jrl::qp::internal::OrthonormalSequence</class>
    <class kind="class">jrl::qp::internal::PartitionnedQ</class>
    <class kind="class">jrl::qp::internal::SelectedConstraint</class>
    <class kind="class">jrl::qp::internal::SingleNZSegmentVector</class>
    <class kind="class">jrl::qp::internal::TerminationType</class>
    <class kind="class">jrl::qp::internal::InitTermination</class>
    <class kind="struct">jrl::qp::internal::NotConst</class>
    <class kind="class">jrl::qp::internal::Workspace</class>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||(std::is_same_v&lt; T, Base &gt;||derives_from&lt; T, Base &gt;())), int &gt;</type>
      <name>enable_for_t</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a0adce44e5de1deec06a0bc26cd3467d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||derives_from&lt; T, Base &gt;()), int &gt;</type>
      <name>enable_for_templated_t</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>ae6160ea153be0ec4ab02997407a6adab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_enum_v&lt; T &gt;, to_underlying_type, identity &gt;</type>
      <name>cast_as_underlying_if_enum</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a9222c7f429c9c1c4e65bb38b2252e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OSeqType</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>aa0759fb36800658279d39fb5949361ec</anchor>
      <arglist></arglist>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361eca5196f1040c636101b5797c3cbc926613">Householder</enumvalue>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361eca0734c05ef4e55a702e6c121ea6609d44">Givens</enumvalue>
      <enumvalue file="namespacejrl_1_1qp_1_1internal.html" anchor="aa0759fb36800658279d39fb5949361ecafc77ea6ca6b9d7a68b7820f4cc96496b">Permutation</enumvalue>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>ac23c4583f9e2927acaf832c30458833a</anchor>
      <arglist>(std::ostream &amp;os, const ActiveSet &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>check_that_malloc_is_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>a26636a70e1bc6abc062a1c934bc3b27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>set_is_malloc_allowed</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>af860e6b58138f3258af7badafc963379</anchor>
      <arglist>(bool allow)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>derives_from</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>afb8425a498d36cc736a81a867f44b045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_malloc_allowed_impl</name>
      <anchorfile>namespacejrl_1_1qp_1_1internal.html</anchorfile>
      <anchor>aae7ef3e5987a86cb20f10d20292f7a34</anchor>
      <arglist>(bool update, bool new_value=false)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::structured</name>
    <filename>namespacejrl_1_1qp_1_1structured.html</filename>
    <class kind="class">jrl::qp::structured::StructuredC</class>
    <class kind="class">jrl::qp::structured::StructuredG</class>
    <class kind="class">jrl::qp::structured::StructuredJ</class>
    <class kind="class">jrl::qp::structured::StructuredQR</class>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::test</name>
    <filename>namespacejrl_1_1qp_1_1test.html</filename>
    <class kind="struct">jrl::qp::test::FeasibilityConstraints</class>
    <class kind="struct">jrl::qp::test::SeparatedFeasibilityConstraints</class>
    <class kind="struct">jrl::qp::test::LeastSquareProblem</class>
    <class kind="struct">jrl::qp::test::QPProblem</class>
    <class kind="struct">jrl::qp::test::scalar_normal_random_op</class>
    <class kind="struct">jrl::qp::test::ProblemCharacteristics</class>
    <class kind="struct">jrl::qp::test::RandomLeastSquare</class>
    <member kind="function">
      <type>LeastSquareProblem JRLQP_DLLAPI</type>
      <name>generateBoxAndSingleConstraintProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ae4b1523748e3f22a5a71dae884f44cd6</anchor>
      <arglist>(int nbVar, bool act, double actLevel=0.5)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a38df76f4aae127fb36c38841160c5d35</anchor>
      <arglist>(const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a74b6ea3245d0cdeddbb545c62a983159</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>void JRLQP_DLLAPI</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>afa6a0f34c14c947a9bdb6a6c6496d857</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>af1cd5934919b77d33bb2bea7d8533eac</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKT</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a0c3338b4e05cc6981cbed334f436e8f0</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab46e4cc20b4a77480d9a1bf7ec054456</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTStationarity</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a89c4801e6c61c6d4d4599addac78963f</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const QPProblem&lt;&gt; &amp;pb, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a24de9eb83b0bce6960b8fe3665a82ec5</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC=false, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool JRLQP_DLLAPI</type>
      <name>testKKTFeasibility</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ad456662bbb7afae7995357770219db12</anchor>
      <arglist>(const VectorConstRef &amp;x, const VectorConstRef &amp;u, const FeasibilityConstraints &amp;cstr, double tau_p=1e-6, double tau_d=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>randnVec</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a2663831861c4e4e3f32c85248a423de9</anchor>
      <arglist>(Eigen::Index size, double mean=0, double stddev=1)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>randnMat</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a65476347bd4aeb0e6672d90f3fe0d97a</anchor>
      <arglist>(Eigen::Index rows, Eigen::Index cols, double mean=0, double stddev=1)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>randUnitVec</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab7fa5aa12944128ba9833c258e4c833e</anchor>
      <arglist>(Eigen::Index size)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>randOrtho</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a0f71bb73a591673a09cb82c072a2bc66</anchor>
      <arglist>(Eigen::Index size, bool special=false)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>randn</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a2211b116ed574f7148f2974b18d1efc8</anchor>
      <arglist>(Eigen::Index rows, Eigen::Index cols, Eigen::Index rank=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
      <name>randDependent</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ae07c8255e808b225b4c77dfe8d555931</anchor>
      <arglist>(Eigen::Index cols, Eigen::Index rowsA, Eigen::Index rankA, Eigen::Index rowsB, Eigen::Index rankB, Eigen::Index rankAB)</arglist>
    </member>
    <member kind="function">
      <type>RandomLeastSquare JRLQP_DLLAPI</type>
      <name>randomProblem</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a562af6c4f0f6a140519a7b6b1d1b3281</anchor>
      <arglist>(const ProblemCharacteristics &amp;characs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>aea47089d11bc2b0bbac4a73a31816443</anchor>
      <arglist>([[maybe_unused]] int n, [[maybe_unused]] const MatrixConstRef &amp;C, [[maybe_unused]] const VectorConstRef &amp;bl, [[maybe_unused]] const VectorConstRef &amp;bu, [[maybe_unused]] const VectorConstRef &amp;xl, [[maybe_unused]] const VectorConstRef &amp;xu, [[maybe_unused]] bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>af9d8456e41e5e586a9fd30b12fc95a9c</anchor>
      <arglist>([[maybe_unused]] const MatrixConstRef &amp;G, [[maybe_unused]] const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a697d39ee1edd58eff4e678057a42aa50</anchor>
      <arglist>([[maybe_unused]] const VectorConstRef &amp;x, [[maybe_unused]] const VectorConstRef &amp;u, const MatrixConstRef &amp;G, const VectorConstRef &amp;a, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkDimensions</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>a40e6d5144472f3a524e51a95c6983318</anchor>
      <arglist>([[maybe_unused]] const VectorConstRef &amp;x, [[maybe_unused]] const VectorConstRef &amp;u, const MatrixConstRef &amp;C, const VectorConstRef &amp;bl, const VectorConstRef &amp;bu, const VectorConstRef &amp;xl, const VectorConstRef &amp;xu, bool transposedC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disp</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab4551a4746af157fa3a2ec0514d294c5</anchor>
      <arglist>(const std::string &amp;name, const MatrixBase&lt; Derived &gt; &amp;M)</arglist>
    </member>
    <member kind="variable">
      <type>struct JRLQP_DLLAPI</type>
      <name>SeparatedFeasibilityConstraints</name>
      <anchorfile>namespacejrl_1_1qp_1_1test.html</anchorfile>
      <anchor>ab1dd5e41b148ceade20a5bbe4e5fdedf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>jrl::qp::utils</name>
    <filename>namespacejrl_1_1qp_1_1utils.html</filename>
    <class kind="class">jrl::qp::utils::Logger</class>
    <class kind="class">jrl::qp::utils::toMatlab</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacejrl_1_1qp_1_1utils.html</anchorfile>
      <anchor>a0eb26b851348ed93a47704280c68b995</anchor>
      <arglist>(std::ostream &amp;o, const toMatlab &amp;tom)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_eigen_ref_v</name>
      <anchorfile>namespacejrl_1_1qp_1_1utils.html</anchorfile>
      <anchor>a4023f6078d4e0b5ae15f27313e65c6a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
